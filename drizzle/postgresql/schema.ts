import { pgTable, uuid, timestamp, numeric, text, foreignKey } from "drizzle-orm/pg-core"
import { sql } from "drizzle-orm"



export const pins = pgTable("pins", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	createdAt: timestamp("created_at", { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { withTimezone: true, mode: 'string' }).defaultNow(),
	lat: numeric(),
	lng: numeric(),
	type: text(),
	name: text(),
	address: text(),
	cityVillage: text("city_village"),
	description: text(),
	deletedAt: timestamp("deleted_at", { withTimezone: true, mode: 'string' }),
	images: text().array(),
	failureReason: text("failure_reason"),
	status: text(),
	lastSyncedAt: timestamp("last_synced_at", { withTimezone: true, mode: 'string' }),
	lastFailedSyncAt: timestamp("last_failed_sync_at", { withTimezone: true, mode: 'string' }),
	localImages: text("local_images"),
});

export const users = pgTable("users", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	createdAt: timestamp("created_at", { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
	name: text().notNull(),
});

export const forms = pgTable("forms", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	createdAt: timestamp("created_at", { withTimezone: true, mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { withTimezone: true, mode: 'string' }).defaultNow(),
	pinId: uuid("pin_id"),
	canAttend: text("can_attend"),
	longTermConditions: text("long_term_conditions").array(),
	otherCondition: text("other_condition"),
	conditionDetails: text("condition_details"),
	managementMethods: text("management_methods").array(),
	otherManagement: text("other_management"),
	whatDoWhenSick: text("what_do_when_sick").array(),
	otherSickAction: text("other_sick_action"),
	knowDoctor: text("know_doctor"),
	ownTransport: text("own_transport"),
	whereBuyMedicine: text("where_buy_medicine"),
	otherBuyMedicine: text("other_buy_medicine"),
	povertyCard: text("poverty_card"),
	brushTeeth: text("brush_teeth"),
	otherBrushTeeth: text("other_brush_teeth"),
	haveToothbrush: text("have_toothbrush"),
	diarrhoea: text(),
	diarrhoeaAction: text("diarrhoea_action"),
	coldLookLike: text("cold_look_like"),
	coldAction: text("cold_action").array(),
	mskInjury: text("msk_injury"),
	mskAction: text("msk_action").array(),
	hypertension: text(),
	hypertensionAction: text("hypertension_action").array(),
	cholesterol: text(),
	cholesterolAction: text("cholesterol_action").array(),
	diabetes: text(),
	diabetesAction: text("diabetes_action").array(),
	handBeforeMeal: text("hand_before_meal"),
	handAfterToilet: text("hand_after_toilet"),
	eatCleanFood: text("eat_clean_food"),
	otherLearning: text("other_learning"),
	waterSources: text("water_sources").array(),
	otherWaterSource: text("other_water_source"),
	unsafeWater: text("unsafe_water").array(),
	knowWaterFilters: text("know_water_filters"),
	notUsingWaterFilter: text("not_using_water_filter").array(),
	otherWaterFilterReason: text("other_water_filter_reason"),
	deletedAt: timestamp("deleted_at", { withTimezone: true, mode: 'string' }),
	village: text(),
	villageId: text("village_id"),
	failureReason: text("failure_reason"),
	status: text(),
	lastSyncedAt: timestamp("last_synced_at", { withTimezone: true, mode: 'string' }),
	lastFailedSyncAt: timestamp("last_failed_sync_at", { withTimezone: true, mode: 'string' }),
}, (table) => [
	foreignKey({
			columns: [table.pinId],
			foreignColumns: [pins.id],
			name: "forms_pin_id_fkey"
		}).onUpdate("cascade").onDelete("set null"),
]);
